name: on-main-push
run-name: on-main-push into ${{ github.ref }} â„–${{ github.run_number }}

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:  # <-- this YAML-mapping allows to invoke this workflow from internal/public releases
    inputs:
      release_type:
        type: string
        required: false
      release_phase:
        type: string
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout the 'main'-branch of repo '${{ github.ref }}' into './main-branch'"
        uses: actions/checkout@v4
        with:
          ref: main
          path: main-branch
          fetch-depth: 0

      - name: "Set up JDK 25 (Amazon Corretto)"
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          check-latest: true
          cache: 'maven'
          cache-dependency-path: main-branch/pom.xml

      - name: "Dump Git-Hub context-variables into '.github/th-vars'-dir"
        run: |
          # dump the value of Git-Hub context-variables
          cd main-branch
          echo '${{ toJson(github) }}' > .github/th-vars/var-github.json
          echo '${{ toJson(inputs) }}' > .github/th-vars/var-githubInputs.json
          echo '${{ toJson(secrets)  }}' > .github/th-vars/var-secrets.json
          echo "~~~~~~~~~~~~~ ( dump the content of cotext-variables into summary ) ~~~~~~~~~~~~~"
          .github/th-vars/dump-to-summary-sections.sh

      - name: "Perform the build and install using 'Apache Maven'"
        run: |
          # build and install to local maven repository
          cd main-branch
          echo "Current directory is $(pwd)"
          mvn -B clean install
          echo "~~~~~~~~~~~~~ ( dump the content of './target/' into summary ) ~~~~~~~~~~~~~"
          echo "
          the result of maven-build (content of \`./target/\` directory):
          \`\`\`bash
          $(ls -laxo ./target)
          \`\`\`" >> $GITHUB_STEP_SUMMARY

      # Following step is for INTERNAL-release phase(1)
      - name: "Perform the deployment into Git-Hub Artifactory"
        if: ${{ inputs && inputs.release_type == 'INTERNAL' && inputs.release_phase == 'call-main'}}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "--- deployment to GitHub Artifactory: ---"
          cd main-branch
          mvn -B deploy
          # Process the template '.github/th-templates/Usage-INTERNAL.md.th' via 'th-tool':
          .github/th-tool.sh process .github/th-templates/Usage-INTERNAL.md.th --output $GITHUB_STEP_SUMMARY

      # Following step is for PUBLIC-release phase(1)
      - name: "Perform the deployment into Maven-Central Artifactory"
        if: ${{ inputs && inputs.release_type == 'PUBLIC' && inputs.release_phase == 'call-main'}}
        run: |
          echo "--- deployment to Maven-Central Artifactory: ---"
          cd main-branch
          echo "
          ---

          Going to perform the deployment into internal Maven-Central Artifactory

          _... to be done (2) ..._

          Just deployed version '$(.github/th-tool.sh eval mh.currentProjectVersion)' is now available for anyone
          
          ---" >> $GITHUB_STEP_SUMMARY
          # Process the template '.github/th-templates/Usage-PUBLIC.md.th' via 'th-tool':
          .github/th-tool.sh process .github/th-templates/Usage-PUBLIC.md.th --output $GITHUB_STEP_SUMMARY

      # Following step is for phase(2) of both INTERNAL-release and PUBLIC-release
      - name: "Inform the developers that new SNAPSHOT-version is available"
        if: ${{ inputs && inputs.release_phase == 'call-main-next'}}
        run: |
          echo "--- handle the phase when new SNAPSHOT-version is created: ---"
          cd main-branch
          # Process the template '.github/th-templates/Usage-SNAPSHOT.md.th' via 'th-tool':
          .github/th-tool.sh process .github/th-templates/Usage-SNAPSHOT.md.th --output $GITHUB_STEP_SUMMARY

      # Following step is for regular commit/push (absence of 'inputs.release_type' implies that):
      - name: "Specific actions for regular commits (most probably nothing)"
        if: ${{ inputs.release_type != 'INTERNAL' && inputs.release_type != 'PUBLIC' }}
        run: |
          echo "--- this is a regular commit, that is not related to any releases ---"
          cd main-branch
          # Process the template '.github/th-templates/Usage-SNAPSHOT.md.th' via 'th-tool':
          .github/th-tool.sh process .github/th-templates/Usage-SNAPSHOT.md.th --output $GITHUB_STEP_SUMMARY

      - name: "Checkout the 'gh-pages'-branch of repo '${{ github.ref }}' into './gh-pages-branch'"
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-branch
          fetch-depth: 0

      - name: "Copy the result of 'javadoc' MOJOs and the output of 'git-log' from 'main-branch' to './gh-pages-branch'"
        run: |
          cd main-branch
          git log --oneline > ../gh-pages-branch/git-log.txt
          echo "the content of git log is $(wc --lines --bytes ../gh-pages-branch/git-log.txt)"
          # going to extract the file-slug (basename without extension) of a target JAR-file
          # and use it as a name of the destination directory to copy the generated Java-Doc
          JAR_FILE_NAME=$(find "./target/" -name "core*.jar" ! -name "*javadoc.jar" ! -name "*sources.jar" -exec basename {} \;)
          echo "... going to re-write the content of folder '$(realpath ../gh-pages-branch/${JAR_FILE_NAME%.*})' ..."
          rm -rf ../gh-pages-branch/*-SNAPSHOT
          cp -r target/reports/apidocs/ ../gh-pages-branch/${JAR_FILE_NAME%.*}
          echo "JAR_FILE_NAME=$JAR_FILE_NAME"

          #tree -L 2 ../gh-pages-branch
          ls -laxo ../gh-pages-branch

      - name: "Commit and push the content 'gh-pages-branch' (together with some test text-files)"
        run: |
          # build and install to local maven repository
          echo "created by GitHub-Workflow '$GITHUB_WORKFLOW' action #$GITHUB_RUN_NUMBER with '${{ inputs.release_type }}/${{ inputs.release_phase }}' at $(date)" >> gh-pages-branch/a.txt
          cd gh-pages-branch
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "add the test text-file a.txt as a result of GitHub-Workflow '$GITHUB_WORKFLOW' #$GITHUB_RUN_NUMBER with '${{ inputs.release_type }}/${{ inputs.release_phase }}'"
          git push
          echo "That's it "'!!!'



