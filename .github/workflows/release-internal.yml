name: release-internal
run-name: ${{ github.actor }} has executed 'release-internal' â„–${{ github.run_number }}
on: workflow_dispatch

jobs:
  release-internal:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: "Checkout the latest version of repo in '${{ github.ref }}'"
        uses: actions/checkout@v4

      - name: "Set up JDK 25 (Amazon Corretto)"
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          check-latest: true
          cache: 'maven'
          cache-dependency-path: pom.xml

      - name: "Perform the build and install using 'Apache Maven'"
        run: |
          # build and install to the local maven repository
          mvn -B clean install
          echo "~~~~~~~~~~~~~ ( dump the content of './target/' into summary ) ~~~~~~~~~~~~~"
          echo "
          the result of maven-build before <b>internal release</b> (content of \`./target\` directory):
          \`\`\`bash
          $(ls -laxo "./target")
          \`\`\`
          " >> $GITHUB_STEP_SUMMARY

      - name: "Changing the version of project to internal release, perform two commits and creating a tag"
        run: |
          CURRENT_VERSION=$(.github/th-tool.sh eval mh.currentProjectVersion)
          NEW_RELEASE_VERSION=$(.github/th-tool.sh eval mh.internalReleaseVersion)
          NEW_VERSION_NEXT=$(.github/th-tool.sh eval mh.internalNextVersion)

          git config user.name github-actions
          git config user.email github-actions@github.com

          echo "- changing the version from '$CURRENT_VERSION' to '$NEW_RELEASE_VERSION';"
          mvn -B --quiet versions:set -DnewVersion=$NEW_RELEASE_VERSION
          echo "- going to commit the updated 'pom.xml' into git (THE FIRST COMMIT);"
          git add pom.xml
          git commit -m "<< internal release >> $NEW_RELEASE_VERSION"

          echo "- going to create a tag '$NEW_RELEASE_VERSION';"
          git tag $NEW_RELEASE_VERSION

          echo "- going to push the the first commit and tag"
          git push --force --atomic origin $GITHUB_REF $NEW_RELEASE_VERSION

          echo "- changing the version from '$NEW_RELEASE_VERSION' to '$NEW_VERSION_NEXT';"
          mvn -B --quiet versions:set -DnewVersion=$NEW_VERSION_NEXT
          echo "- going to commit the updated 'pom.xml' into git (THE SECOND COMMIT);"
          git add pom.xml
          git commit -m "<< new snapshot version >> $NEW_VERSION_NEXT"

          echo "- going to push the second commit"
          git push --force
