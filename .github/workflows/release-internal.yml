name: release-internal
run-name: ${{ github.actor }} has executed 'release-internal' â„–${{ github.run_number }}
on: workflow_dispatch

permissions:
  contents: write
  packages: write

# this workflow consists of 3 jobs - two phase-jobs and one call-workflow between those phases
jobs:

  # the first phase is about updating the project version to 'internal release' and PUSH #1
  release-internal:
    runs-on: ubuntu-latest

    steps:
      - name: "[1] Checkout the latest version of repo in '${{ github.ref }}'"
        uses: actions/checkout@v4

      - name: "[1] Set up JDK 25 (Amazon Corretto)"
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          check-latest: true
          cache: 'maven'
          cache-dependency-path: pom.xml

      - name: "[1] Perform the build and install using 'Apache Maven'"
        run: |
          # build and install to the local maven repository
          mvn -B clean install
          echo "~~~~~~~~~~~~~ ( dump the content of './target/' into summary ) ~~~~~~~~~~~~~"
          echo "
          the result of maven-build before <b>internal release</b> (content of \`./target\` directory):
          \`\`\`bash
          $(ls -laxo "./target")
          \`\`\`
          " >> $GITHUB_STEP_SUMMARY
          echo "~~~~~~~~~~~~~ ( save corresponding versions into GITHUB_ENV ) ~~~~~~~~~~~~~"
          echo "INITIAL_VERSION=$(.github/th-tool.sh eval mh.currentProjectVersion)" >> "$GITHUB_ENV"
          echo "NEW_RELEASE_VERSION=$(.github/th-tool.sh eval mh.internalReleaseVersion)" >> "$GITHUB_ENV"
          echo "NEW_VERSION_NEXT=$(.github/th-tool.sh eval mh.internalNextVersion)" >> "$GITHUB_ENV"

      - name: "[1] Changing the version of project to internal release, creating a tag and PUSH #1"
        run: |
          # the first phase pf internal release
          echo "(1) INITIAL_VERSION = '$INITIAL_VERSION'"
          echo "(1) NEW_RELEASE_VERSION = '$NEW_RELEASE_VERSION'"
          echo "(1) NEW_VERSION_NEXT = '$NEW_VERSION_NEXT'"

          git config user.name github-actions
          git config user.email github-actions@github.com

          echo "- changing the version from '$INITIAL_VERSION' to '$NEW_RELEASE_VERSION';"
          mvn -B --quiet versions:set -DnewVersion=$NEW_RELEASE_VERSION
          echo "- going to commit the updated 'pom.xml' into git (THE FIRST COMMIT);"
          git add pom.xml
          git commit -m "<< internal release >> $NEW_RELEASE_VERSION"

          echo "- going to create a tag '$NEW_RELEASE_VERSION';"
          git tag $NEW_RELEASE_VERSION

          echo "- going to push the the first commit and tag"
          git push --force --atomic origin $GITHUB_REF $NEW_RELEASE_VERSION

  # in the middle of two phases it's necessary to call the workflow 'on-main-push.yml'
  fire-on-main-push:
    needs: release-internal
    uses: ./.github/workflows/on-main-push.yml

  # the second phase is about updating the project version to 'internal release' and PUSH #2
  release-internal-next:
    needs: [release-internal]
    runs-on: ubuntu-latest

    steps:
      - name: "[2] Checkout the latest version of repo in '${{ github.ref }}'"
        uses: actions/checkout@v4

      - name: "[2] Set up JDK 25 (Amazon Corretto)"
        uses: actions/setup-java@v4
        with:
          java-version: '25'
          distribution: 'corretto'
          check-latest: true
          cache: 'maven'
          cache-dependency-path: pom.xml

      - name: "[2] Changing the version of project to next snapshot after internal release and and PUSH #2"
        run: |
          # the second phase of internal release
          echo "(2) INITIAL_VERSION = '${{ env.INITIAL_VERSION }}'"
          echo "(2) NEW_RELEASE_VERSION = '${{ env.NEW_RELEASE_VERSION }}'"
          echo "(2) NEW_VERSION_NEXT = '${{ env.NEW_VERSION_NEXT }}'"
          
          echo "- changing the version from '${{ env.NEW_RELEASE_VERSION }}' to '${{ env.NEW_VERSION_NEXT }}';"
          mvn -B --quiet versions:set -DnewVersion=${{ env.NEW_VERSION_NEXT }}
          echo "- going to commit the updated 'pom.xml' into git (THE SECOND COMMIT);"
          git add pom.xml
          git commit -m "<< new snapshot version >> ${{ env.NEW_VERSION_NEXT }}"

          echo "- going to push the second commit"
          git push --force
