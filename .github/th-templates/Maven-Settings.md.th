Each GitHub account has its onw artifactory, which is known as [GitHub Packages](https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages).
The most important thing for us is that artifactory could be used as an additional remote [maven repository](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry).
In order to do refer this particular project - we must add following XML-tags
into the local file `~/.m2/settings.xml` (or create such file in proper place if it was not created before):

```xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd">

  <activeProfiles>
    <activeProfile>github</activeProfile>
  </activeProfiles>

  <profiles>
    <profile>
      <id>github</id>
      <repositories>
        <repository>
          <id>central</id>
          <url>https://repo.maven.apache.org/maven2</url>
        </repository>
        <repository>
          <id>github-krm-demo</id>
          <name>GitHub Packages of 'krm-demo/*' repositories</name>
          <url>https://maven.pkg.github.com/krm-demo/*</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </repository>
      </repositories>
    </profile>
  </profiles>
  
  <servers>
    <server>
      <id>github-krm-demo</id>
      <username>OWNER_NAME</username>
      <password>MY_READONLY_TOKEN</password>
    </server>
  </servers>
</settings>
```
- where the value of `OWNER_NAME` should be <code>krm-demo</code> (you can try another `<username>`)
- and the value of `MY_READONLY_TOKEN` should be <code>[[${secrets.get("MY_READONLY_TOKEN")}]]</code>

> [!IMPORTANT]
> In XML-snippet above the `<password>`-tag corresponds to GitHub-secret `MY_READONLY_TOKEN`,
> which is not allowed to be displayed in a normal scenario, because it violates
> the principles why those secrets are introduced in GitHub.
> But here we know definitely that this _secret_ is _not a secret_, 
> because it allows safe *readonly** access - so, masking it with zero-spaces would be OK.

After that you can use the latest internal release of **`[[${mavenProps.get("maven-project.artifact")}]]`** 
in any maven/gradle project (from command-line and with IDE).
As for using via JBang - there could be some troubles resolving 
that additional remote maven-repository and one of single-time workaround
is to download the corresponding manually with command `mvn dependency:get`:
```bash
...> mvn dependency:get -Dartifact=[[${mavenProps.get("maven-project.group")}]]:[[${mavenProps.get("maven-project.artifact")}]]:[[${mavenProps.get("maven-project.version")}]]
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------< org.apache.maven:standalone-pom >-------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] --- dependency:3.7.0:get (default-cli) @ standalone-pom ---
[INFO] Resolving io.github.krm-demo:core-utils:jar:21.02.002 with transitive dependencies
Downloading from central: https://repo.maven.apache.org/maven2/io/github/krm-demo/core-utils/21.02.002/core-utils-21.02.002.pom
Downloading from github: https://maven.pkg.github.com/krm-demo/*/io/github/krm-demo/core-utils/21.02.002/core-utils-21.02.002.pom
Downloaded from github: https://maven.pkg.github.com/krm-demo/*/io/github/krm-demo/core-utils/21.02.002/core-utils-21.02.002.pom (23 kB at 24 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/io/github/krm-demo/core-utils/21.02.002/core-utils-21.02.002.jar
Downloading from github: https://maven.pkg.github.com/krm-demo/*/io/github/krm-demo/core-utils/21.02.002/core-utils-21.02.002.jar
Downloaded from github: https://maven.pkg.github.com/krm-demo/*/io/github/krm-demo/core-utils/21.02.002/core-utils-21.02.002.jar (90 kB at 134 kB/s)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.549 s
[INFO] Finished at: 2025-09-29T14:26:04-04:00
[INFO] ------------------------------------------------------------------------
```

Once the artifact is downloaded (installed at local maven-repository)
JBang will recognize it and will work with it as with any other artifact: 

```bash
...> jbang [[${mavenProps.get("maven-project.group")}]]:[[${mavenProps.get("maven-project.artifact")}]]:[[${mavenProps.get("maven-project.version")}]]
This is a Main-class of 'core-utils' library (just a test message here)
```