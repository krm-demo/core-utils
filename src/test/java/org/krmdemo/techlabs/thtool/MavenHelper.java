package org.krmdemo.techlabs.thtool;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.apache.commons.lang3.StringUtils;
import org.krmdemo.techlabs.core.dump.DumpUtils;
import org.krmdemo.techlabs.core.utils.PropertiesUtils;

import java.util.NavigableMap;

/**
 * This class represents a helper-object to work with maven-properties,
 * which is available from <b>{@code th-tool}</b>-templates by name {@code mh}.
 * <hr/>
 * It encapsulates the logic of incrementing the version of maven-project
 * during internal and public releases, which is usually performed by
 * <a href="https://maven.apache.org/maven-release/maven-release-plugin/">Maven Release Plugin</a>
 * with its goals:<ul>
 *     <li><a href="https://maven.apache.org/maven-release/maven-release-plugin/prepare-mojo.html">
 *         release:prepare
 *     </a></li>
 *     <li><a href="https://maven.apache.org/maven-release/maven-release-plugin/prepare-mojo.html">
 *         release:prepare-with-pom
 *     </a></li>
 * </ul>
 */
@JsonPropertyOrder(alphabetic = true)
public class MavenHelper {

    /**
     * The format-string of maven-project version that is in development right now:
     * <br/>{@literal <major-version>.<minor-version>.<incremental-version>-<qualifier>}
     */
    public final static String SNAPSHOT_VERSION_FORMAT = "%d.%02d.%03d-%s";

    /**
     * The same as {@link #SNAPSHOT_VERSION_FORMAT}, but without qualifier-suffix.
     */
    public final static String INTERNAL_RELEASE_VERSION_FORMAT = "%d.%02d.%03d";

    /**
     * The same as {@link #INTERNAL_RELEASE_VERSION_FORMAT}, but without incremental version.
     */
    public final static String PUBLIC_RELEASE_VERSION_FORMAT = "%d.%02d";

    /**
     * Default path to properties-resource that is generated by <b>{@code properties-maven-plugin}</b>
     * and corresponds to its {@code outputFile} configuration parameter.
     */
    public final static String RESOURCE_PATH__MVN_PROPS =
        "/META-INF/maven/maven-project.properties";

    private final String resourcePathMvnProps;
    private final NavigableMap<String, String> mvnPropsMap;

    /**
     * Constructor over {@link #RESOURCE_PATH__MVN_PROPS default maven-properties}
     */
    public MavenHelper() {
        this(RESOURCE_PATH__MVN_PROPS);
    }

    /**
     * @param resourcePathMvnProps the path to maven-properties resource
     */
    public MavenHelper(String resourcePathMvnProps) {
        this.resourcePathMvnProps = resourcePathMvnProps;
        this.mvnPropsMap = PropertiesUtils.propsMapResource(resourcePathMvnProps);
    }

    public String getResourcePath() {
        return resourcePathMvnProps;
    }

    public String getCurrentProjectVersion() {
        return mvnPropsMap.get("maven-project.version");
    }

    public String getInternalReleaseVersion() {
        return String.format(INTERNAL_RELEASE_VERSION_FORMAT,
            getMajorVersionAsInt(),
            getMinorVersionAsInt(),
            getIncrementalAsInt()
        );
    }

    public String getPublicReleaseVersion() {
        return String.format(PUBLIC_RELEASE_VERSION_FORMAT,
            getMajorVersionAsInt(),
            getMinorVersionAsInt()
        );
    }

    public String getPublicNextVersion() {
        return String.format(SNAPSHOT_VERSION_FORMAT,
            getMajorVersionAsInt(),
            getMinorVersionAsInt() + 1,
            1,
            getVersionQualifier()
        );
    }

    public String getInternalNextVersion() {
        return String.format(SNAPSHOT_VERSION_FORMAT,
            getMajorVersionAsInt(),
            getMinorVersionAsInt(),
            getIncrementalAsInt() + 1,
            getVersionQualifier()
        );
    }

    public String getCalculatedProjectVersion() {
        return String.format(SNAPSHOT_VERSION_FORMAT,
            getMajorVersionAsInt(),
            getMinorVersionAsInt(),
            getIncrementalAsInt(),
            getVersionQualifier()
        );
    }

    /**
     * @return in this project this method must always return the value {@code "21"},
     * which corresponds to the minimal version of JDK this library is built with
     */
    public String getMajorVersion() {
        return mvnPropsMap.get("parsedVersion.majorVersion");
    }

    /**
     * @return the value of {@link #getMajorVersion()} as {@link Integer}
     */
    public Integer getMajorVersionAsInt() {
        return Integer.valueOf(getMajorVersion());
    }

    /**
     * @return the minor version corresponds to sequence number of <b>public release</b>
     */
    public String getMinorVersion() {
        return mvnPropsMap.get("parsedVersion.minorVersion");
    }

    /**
     * @return the value of {@link #getMinorVersion()} as {@link Integer}
     */
    public Integer getMinorVersionAsInt() {
        return Integer.valueOf(getMinorVersion());
    }

    /**
     * @return the minor version corresponds to the sequence number of <b>internal release</b>
     * since the last <b>public release</b> (should be {@code 0} right after the public release is performed)
     */
    public String getIncrementalVersion() {
        return mvnPropsMap.get("parsedVersion.incrementalVersion");
    }

    /**
     * @return the value of {@link #getIncrementalVersion()} as {@link Integer}
     */
    public Integer getIncrementalAsInt() {
        return Integer.valueOf(getIncrementalVersion());
    }

    /**
     * @return in this project this method must always return the value {@code "SNAPSHOT"}
     */
    public String getVersionQualifier() {
        String qualifier = mvnPropsMap.get("parsedVersion.qualifier");
        return StringUtils.isBlank(qualifier) ? "SNAPSHOT" : qualifier;
    }

    @Override
    public String toString() {
        return "maven-helper object with properties --> " + DumpUtils.dumpAsJsonTxt(this);
    }
}
