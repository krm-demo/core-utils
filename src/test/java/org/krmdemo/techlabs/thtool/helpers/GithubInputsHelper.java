package org.krmdemo.techlabs.thtool.helpers;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.krmdemo.techlabs.core.dump.DumpUtils;
import org.krmdemo.techlabs.thtool.ThymeleafToolCtx;

import java.util.Map;
import java.util.Objects;

/**
 * This class represents a <b>{@code th-tool}</b>-helper to work with GitHub-Workflow "inputs",
 * and with environment variables that are specific for release phases of Github-Workflow actions.
 * The properties of this helper are available from <b>{@code th-tool}</b>-templates by name {@code mh}.
 * <hr/>
 * Technically is just a wrapper over the data, which is generated by GitHub-Workflow
 * and already available from <b>{@code th-tool}</b> via {@code githubInputs}-variable,
 * and via standard access to {@link System#getenv() environment valriables}
 */
@JsonPropertyOrder(alphabetic = true)
public class GithubInputsHelper {

    public static final String VAR_NAME__HELPER = "gih";
    public static final String VAR_NAME__GITHUB_INPUTS = "githubInputs";

    public static GithubInputsHelper fromCtxLazy() {
        return fromCtxLazy(new ThymeleafToolCtx());
    }

    public static GithubInputsHelper fromCtxLazy(ThymeleafToolCtx ttCtx) {
        GithubInputsHelper helper = fromCtx(ttCtx);
        if (helper == null) {
            register(ttCtx);
            helper = fromCtx(ttCtx);
        }
        return helper;
    }

    public static GithubInputsHelper fromCtx(ThymeleafToolCtx ttCtx) {
        return ttCtx.typedVar(VAR_NAME__HELPER, GithubInputsHelper.class);
    }

    public static void register(ThymeleafToolCtx ttCtx) {
        GithubInputsHelper helper = new GithubInputsHelper(ttCtx);
        ttCtx.setVariable(VAR_NAME__HELPER, helper);
    }

    private final ThymeleafToolCtx ttCtx;
    private GithubInputsHelper(ThymeleafToolCtx ttCtx) {
        this.ttCtx = Objects.requireNonNull(ttCtx);
    }

    /**
     * @return the main underlying <b>{@code th-tool}</b>-variable as properties-map (similar to initial JSON-Object)
     */
    @JsonProperty(VAR_NAME__GITHUB_INPUTS)
    public Map<String, ?> propsGithubInputs() {
        return this.ttCtx.propsVar(VAR_NAME__GITHUB_INPUTS);
    }

    // --------------------------------------------------------------------------------------------

    final static String VAR_PROP_NAME__RELEASE_TYPE = "release_type";
    final static String VAR_PROP_VALUE__RELEASE_TYPE_INTERNAL = "INTERNAL";
    final static String VAR_PROP_VALUE__RELEASE_TYPE_PUBLIC = "PUBLIC";

    final static String VAR_PROP_NAME__RELEASE_PHASE = "release_phase";
    final static String VAR_PROP_VALUE__PHASE_MAIN = "call-main";
    final static String VAR_PROP_VALUE__PHASE_NEXT = "call-main-next";

    public boolean isReleasing() {
        return isReleasingInternal() || isReleasingPublic();
    }

    public boolean isReleasingInternal() {
        return VAR_PROP_VALUE__RELEASE_TYPE_INTERNAL.equals(
            propsGithubInputs().get(VAR_PROP_NAME__RELEASE_TYPE));
    }

    public boolean isReleasingPublic() {
        return VAR_PROP_VALUE__RELEASE_TYPE_PUBLIC.equals(
            propsGithubInputs().get(VAR_PROP_NAME__RELEASE_TYPE));
    }

    public boolean isRenderingMainPhase() {
        return VAR_PROP_VALUE__PHASE_MAIN.equals(
            propsGithubInputs().get(VAR_PROP_NAME__RELEASE_PHASE));
    }

    public boolean isRenderingNextPhase() {
        return VAR_PROP_VALUE__PHASE_NEXT.equals(
            propsGithubInputs().get(VAR_PROP_NAME__RELEASE_PHASE));
    }

    @Override
    public String toString() {
        return DumpUtils.dumpAsJsonTxt(this);
    }
}
