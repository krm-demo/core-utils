package org.krmdemo.techlabs.thtool;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.krmdemo.techlabs.core.dump.DumpUtils;

import java.util.Collections;
import java.util.Map;
import java.util.Objects;

/**
 * This class represents a helper-object to work with GitHub-Workflow "inputs",
 * which is available from <b>{@code th-tool}</b>-templates by name {@code mh}.
 * <hr/>
 * Technically is just a wrapper over the data, which is generated by GitHub-Workflow
 * and already available from <b>{@code th-tool}</b> via {@code githubInputs}-variable.
 */
@JsonPropertyOrder(alphabetic = true)
public class GithubInputsHelper {

    final static String VAR_NAME__GITHUB_INPUTS = "githubInputs";

    final static String VAR_PROP_NAME__RELEASE_TYPE = "release_type";
    final static String VAR_PROP_VALUE__RELEASE_TYPE_INTERNAL = "INTERNAL";
    final static String VAR_PROP_VALUE__RELEASE_TYPE_PUBLIC = "PUBLIC";

    final static String VAR_PROP_NAME__RELEASE_PHASE = "release_phase";
    final static String VAR_PROP_VALUE__PHASE_MAIN = "call-main";
    final static String VAR_PROP_VALUE__PHASE_NEXT = "call-main-next";

    final private ThymeleafToolCtx ttCtx;

    /**
     * @param ttCtx the context of {@link ThymeleafTool} to wrap
     */
    public GithubInputsHelper(ThymeleafToolCtx ttCtx) {
        this.ttCtx = Objects.requireNonNull(ttCtx);
    }

    @SuppressWarnings({"unchecked", "rawtypes"})
    public Map<String, ?> getGithubInputs() {
        Object githubInputsVar = this.ttCtx.getVariable(VAR_NAME__GITHUB_INPUTS);
        if (githubInputsVar instanceof Map githubInputsMap) {
            return githubInputsMap;
        } else {
            return Collections.emptyMap();
        }
    }

    public boolean isReleasing() {
        return isReleasingInternal() || isReleasingPublic();
    }

    public boolean isReleasingInternal() {
        return VAR_PROP_VALUE__RELEASE_TYPE_INTERNAL.equals(
            getGithubInputs().get(VAR_PROP_NAME__RELEASE_TYPE));
    }

    public boolean isReleasingPublic() {
        return VAR_PROP_VALUE__RELEASE_TYPE_PUBLIC.equals(
            getGithubInputs().get(VAR_PROP_NAME__RELEASE_TYPE));
    }

    public boolean isRenderingMainPhase() {
        return VAR_PROP_VALUE__PHASE_MAIN.equals(
            getGithubInputs().get(VAR_PROP_NAME__RELEASE_PHASE));
    }

    public boolean isRenderingNextPhase() {
        return VAR_PROP_VALUE__PHASE_NEXT.equals(
            getGithubInputs().get(VAR_PROP_NAME__RELEASE_PHASE));
    }

    @Override
    public String toString() {
        return DumpUtils.dumpAsJsonTxt(this);
    }
}
