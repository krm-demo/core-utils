package org.krmdemo.techlabs.jacoco;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.krmdemo.techlabs.core.dump.DumpUtils;
import org.krmdemo.techlabs.thtool.ThymeleafTool;
import org.krmdemo.techlabs.thtool.ThymeleafToolCtx;
import org.krmdemo.techlabs.thtool.helpers.GithubBadgeHelper;
import org.krmdemo.techlabs.thtool.helpers.GithubHelper;
import org.krmdemo.techlabs.thtool.helpers.MavenHelper;
import org.opentest4j.reporting.tooling.core.htmlreport.DefaultHtmlReportWriter;

import java.nio.file.Path;
import java.util.Objects;
import java.util.function.Consumer;

/**
 * This class represents a <b>{@code th-tool}</b>-helper to work with the test-coverage report,
 * which is provided by <a href="https://www.eclemma.org/jacoco/">JaCoCo Java Code Coverage Library</a>
 * The properties of this helper are available from <b>{@code th-tool}</b>-templates by name {@code jacoco}.
 */
@JsonPropertyOrder(alphabetic = true)
public class JacocoHelper {

    /**
     * The name of <b>{@code th-tool}</b>-variable for helper-object {@link JacocoHelper}
     */
    public static final String VAR_NAME__HELPER = "jacoco";

    /**
     * @param ttCtx <b>{@code th-tool}</b>-context to wrap
     * @return an instance of {@link JacocoHelper} for unit-tests
     */
    public static JacocoHelper fromCtxLazy(ThymeleafToolCtx ttCtx) {
        JacocoHelper helper = fromCtx(ttCtx);
        if (helper == null) {
            JacocoHelper.register(ttCtx);
            GithubBadgeHelper.register(ttCtx);
            GithubHelper.register(ttCtx);
            MavenHelper.register(ttCtx);
            helper = fromCtx(ttCtx);
        }
        return helper;
    }

    /**
     * A factory-method that returns an instance of {@link GithubBadgeHelper}
     * that was previously registered with {@link #register(ThymeleafToolCtx)}.
     *
     * @param ttCtx <b>{@code th-tool}</b>-context to wrap
     * @return an instance of {@link JacocoHelper} for access from other helpers
     */
    public static JacocoHelper fromCtx(ThymeleafToolCtx ttCtx) {
        return ttCtx.typedVar(VAR_NAME__HELPER, JacocoHelper.class);
    }

    /**
     * Context-registering method of functional type {@link Consumer Consumer&lt;ThymeleafToolCtx&gt;}.
     * Should be used when initializing the instance of {@link ThymeleafTool},
     * which allows to decouple the dependency from <b>{@code th-tool}</b> to helper-objects.
     *
     * @param ttCtx <b>{@code th-tool}</b>-context to register this helper in
     */
    public static void register(ThymeleafToolCtx ttCtx) {
        JacocoHelper helper = new JacocoHelper(ttCtx);
        ttCtx.setVariable(VAR_NAME__HELPER, helper);
    }

    private final ThymeleafToolCtx ttCtx;
    private JacocoHelper(ThymeleafToolCtx ttCtx) {
        this.ttCtx = Objects.requireNonNull(ttCtx);
    }

    // --------------------------------------------------------------------------------------------

    /**
     * A helper-property to be inserted at <b>{@code th-tool}</b>-template in order to render
     * HTML-badge to the test-coverage report that was generated by {@code JaCoCo}-library
     * {@snippet : [(${ jacoco.badgeHtml })] }
     * <hr/>
     * Such badge is present at main 'Overview' JavaDoc-page
     *
     * @return HTML-badge to the test-coverage report that was generated by {@code JaCoCo}-library
     */
    @JsonIgnore
    public String getBadgeHtml() {
        return String.format("""
            <a href="https://krm-demo.github.io/core-utils/%s-%s/jacoco-reports">
              <img alt="a badge to the test-coverage report of the current project-version" src="%s" />
            </a>""",
            GithubHelper.fromCtx(ttCtx).getRepoName(),
            MavenHelper.fromCtx(ttCtx).getCurrentProjectVersion(),
            getBadgeUrl());
    }

    /**
     * A helper-property to be inserted at <b>{@code th-tool}</b>-template in order to render
     * GitHub-Markdown'-badge to the test-coverage report of the current version of project:
     * {@snippet : [(${ jacoco.badgeMarkdown })] }
     * <hr/>
     * Such badge is present at root 'README.md'-file of GitHub-project
     *
     * @return GitHub-Markdown'-badge to the test-coverage report that was generated by {@code JaCoCo}-library
     */
    public String getBadgeMarkdown() {
        return String.format(
            "[![JaCoCo](%s)](https://krm-demo.github.io/core-utils/%s-%s/jacoco-reports)",
            getBadgeUrl(),
            GithubHelper.fromCtx(ttCtx).getRepoName(),
            MavenHelper.fromCtx(ttCtx).getCurrentProjectVersion());
    }

    /**
     * @return the URL to the badge-image for the test-coverage report that was generated by {@code JaCoCo}-library
     */
    public String getBadgeUrl() {
        GithubBadgeHelper gbh = GithubBadgeHelper.fromCtx(ttCtx);
        return gbh.badgeUrlShiedsIO("test-coverage", "JaCoCo", "blue",
            //"b0e0e6", // <-- this color is called "PowderBlue" at https://htmlcolorcodes.com/color-names/
            Path.of(".github/images/jacoco/jacoco-reports.gif").toFile(),
            "f8981d", // <-- this color corresponds "--selected-background-color" CSS-variable ad JavDoc-site
            "4D7A97" // <-- this color corresponds "--navbar-background-color" CSS-variable at JavDoc-site
        );
    }

    @Override
    public String toString() {
        return DumpUtils.dumpAsJsonTxt(this);
    }
}
