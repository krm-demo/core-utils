<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.krm-demo</groupId>
  <artifactId>core-utils</artifactId>
  <version>21.18.002</version>
  <packaging>jar</packaging>

  <name>${project.artifactId}</name>
  <description>Utility-classes to simplify working with core-java API (streams, collections, input-output)</description>
  <url>https://github.com/krm-demo/core-utils</url>

  <organization>
    <name>krm-demo/core-utils</name>
    <url>https://github.com/krm-demo/core-utils</url>
  </organization>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>${lombock.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven.dependency.plugin.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>${maven.release.plugin.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <!--
      TODO: think about getting rid of any compile and runtime  (non-test !!!) dependencies on:
      - lombok (should be excluded if unsused !!!)
      - slf4j+logback (it's definitely in use by Thymeleaf, which has test-scope)
  -->

  <dependencies>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${org.slf4j.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${ch.qos.logback.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${commons-lang.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>${commons-text.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>${commons-io.version}</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${com.fasterxml.jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jsr310</artifactId>
      <version>${com.fasterxml.jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>org.snakeyaml</groupId>
      <artifactId>snakeyaml-engine</artifactId>
      <version>${snakeyaml-engine.version}</version>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${org.junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${org.junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <version>${org.junit.platform.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-reporting</artifactId>
      <version>${org.junit.platform.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${org.assertj.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${org.mockito.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.eclipse.jgit</groupId>
      <artifactId>org.eclipse.jgit</artifactId>
      <version>7.3.0.202506031305-r</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.thymeleaf</groupId>
      <artifactId>thymeleaf</artifactId>
      <version>${org.thymeleaf.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>${picocli.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>

      <!-- Enforcing using the proper version of maven (see https://maven.apache.org/enforcer) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven-enforcer-plugin.version}</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <!-- the goal 'enforce' is bound to maven-phase 'validate' -->
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>[3.9.11,)</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
          Getting the reports about not up-to-date versions of maven-project's dependencies and plugins:
          - getting help: "mvn versions:help" or see https://www.mojohaus.org/versions/versions-maven-plugin/index.html
          - dependencies-updates     ::> "mvn versions:display-dependency-updates"
          - plugin-updates info      ::> "mvn versions:display-plugin-updates"
          - properties-updates info  ::> "mvn versions:display-property-updates"
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>${maven-versions-plugin.version}</version>
        <configuration>
          <ruleSet>
            <ignoreVersions>
              <ignoreVersion>
                <type>regex</type>
                <version>(?i).*-(alpha|beta|m|rc)([-.]?\d+)?</version>
              </ignoreVersion>
            </ignoreVersions>
          </ruleSet>
        </configuration>
      </plugin>

      <!-- Resoling the current, the next and the last released versions of a current maven-project -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${maven-build-helper-plugin.version}</version>
        <executions>
          <execution>
            <id>parse-version</id>
            <phase>validate</phase>
            <goals>
              <goal>parse-version</goal>
            </goals>
          </execution>
          <execution>
            <id>released-version</id>
            <phase>validate</phase>
            <goals>
              <!-- this goal access the remote repository and has no effect without existing release -->
              <goal>released-version</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- saving the properties of maven-project into target output-file -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>${maven-properties-plugin.version}</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>
                ${project.build.outputDirectory}/META-INF/maven/maven-project.properties
              </outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- ??? could be deleted, because it looks like default settings are working fine ??? -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven.resources.plugin.version}</version>
        <configuration>
          <propertiesEncoding>${project.build.sourceEncoding}</propertiesEncoding>
        </configuration>
      </plugin>

      <!-- Compiling the Java-sources (including annotation processing with Lombok) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <release>${maven.compiler.release}</release>
          <compilerArgs>
            <arg>-Xlint:all,-processing</arg>
          </compilerArgs>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </path>
          </annotationProcessorPaths>
          <showWarnings>true</showWarnings>
          <debug>${maven-compiler-plugin.debug}</debug>
        </configuration>
      </plugin>

      <!-- Executing JUnit-tests (using JUnit-5 Platform) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
        <configuration>
          <argLine>
            -javaagent:${settings.localRepository}/org/mockito/mockito-core/${org.mockito.version}/mockito-core-${org.mockito.version}.jar
            -Xshare:off
          </argLine>
          <reportFormat>plain</reportFormat>
          <forkCount>1</forkCount>
          <reuseForks>true</reuseForks>
          <systemPropertyVariables>
            <picocli.ansi>true</picocli.ansi>
            <polyglot.engine.WarnInterpreterOnly>false</polyglot.engine.WarnInterpreterOnly>
          </systemPropertyVariables>
          <statelessTestsetReporter implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5Xml30StatelessReporter">
            <disable>false</disable>
            <version>3.0</version>
            <usePhrasedFileName>false</usePhrasedFileName>
            <usePhrasedTestSuiteClassName>true</usePhrasedTestSuiteClassName>
            <usePhrasedTestCaseClassName>true</usePhrasedTestCaseClassName>
            <usePhrasedTestCaseMethodName>true</usePhrasedTestCaseMethodName>
          </statelessTestsetReporter>
          <consoleOutputReporter implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5ConsoleOutputReporter">
            <!-- if enabled the standard output will not be suppressed, but undesired garbage could be in console -->
            <disable>false</disable>
            <encoding>UTF-8</encoding>
            <usePhrasedFileName>false</usePhrasedFileName>
          </consoleOutputReporter>
          <statelessTestsetInfoReporter implementation="org.apache.maven.plugin.surefire.extensions.junit5.JUnit5StatelessTestsetInfoReporter">
            <disable>false</disable>
            <usePhrasedFileName>false</usePhrasedFileName>
            <usePhrasedClassNameInRunning>true</usePhrasedClassNameInRunning>
            <usePhrasedClassNameInTestCaseSummary>true</usePhrasedClassNameInTestCaseSummary>
          </statelessTestsetInfoReporter>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
      </plugin>

      <!--
          Executing any main-class for debug-purposes and during the build:
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.5.1</version>
        <executions>
          <execution>
            <!-- - executing the class "...CoreUtilsMain" ::> "mvn exec:java@core-utils-main" -->
            <id>core-utils-main</id>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <includeProjectDependencies>true</includeProjectDependencies>
              <includePluginDependencies>false</includePluginDependencies>
              <mainClass>${main-class-name}</mainClass>
            </configuration>
          </execution>
          <execution>
            <!--
              - executing the class "...ThymeleafTool"     ::> `mvn exec:java@th-tool`
              - ... and to provide command line arguments  ::> `mvn exec:java@th-tool -Dexec.args=". . . ."`
            -->
            <id>th-tool</id>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <includeProjectDependencies>true</includeProjectDependencies>
              <includePluginDependencies>false</includePluginDependencies>
              <classpathScope>test</classpathScope>
              <mainClass>${th-tool-class-name}</mainClass>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
          Building the JAR-archive of Java-binaries to be deployed as a main project-artifact
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven-jar-plugin.version}</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>false</addClasspath>
              <addBuildEnvironmentEntries>true</addBuildEnvironmentEntries>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              <mainClass>${main-class-name}</mainClass>
            </manifest>
            <!-- Manifest-Entries, which are specific for CI/CD-server (in this case it's Git-Hub): -->
            <manifestEntries>
              <Build-Timestamp>${maven.build.timestamp}</Build-Timestamp>
              <Project-Group>${project.groupId}</Project-Group>
              <Project-Org-Url>${project.organization.url}</Project-Org-Url>
              <Project-Url>${project.url}</Project-Url>
              <Env-Path>${env.PATH}</Env-Path>
              <Env-Pwd>${env.PWD}</Env-Pwd>
              <Project-Build-Url>${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}</Project-Build-Url>
              <Project-Commit-Url>${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/commit/${env.GITHUB_SHA}</Project-Commit-Url>
            </manifestEntries>
            <manifestSections>
              <manifestSection>
                <name>git-hub</name>
                <manifestEntries>
                  <Github-Server-Url>${env.GITHUB_SERVER_URL}</Github-Server-Url>
                  <Github-Server-Repository>${env.GITHUB_REPOSITORY}</Github-Server-Repository>
                  <Github-Sha>${env.GITHUB_SHA}</Github-Sha>
                  <Github-Ref>${env.GITHUB_REF}</Github-Ref>
                  <Github-Ref-Name>${env.GITHUB_REF_NAME}</Github-Ref-Name>
                  <Github-Ref-Type>${env.GITHUB_REF_TYPE}</Github-Ref-Type>
                  <Github-Head-Ref>${env.GITHUB_HEAD_REF}</Github-Head-Ref>
                  <Github-Run-Id>${env.GITHUB_RUN_ID}</Github-Run-Id>
                  <Github-Run-Attempt>${env.GITHUB_RUN_ATTEMPT}</Github-Run-Attempt>
                  <Github-Run-Number>${env.GITHUB_RUN_NUMBER}</Github-Run-Number>
                  <Github-Workflow>${env.GITHUB_WORKFLOW}</Github-Workflow>
                  <Github-Workflow-Event>${env.GITHUB_EVENT_NAME}</Github-Workflow-Event>
                  <Github-Workflow-Job>${env.GITHUB_JOB}</Github-Workflow-Job>
                  <Github-Workflow-Ref>${env.GITHUB_WORKFLOW_REF}</Github-Workflow-Ref>
                  <Github-Workflow-Sha>${env.GITHUB_WORKFLOW_SHA}</Github-Workflow-Sha>
                </manifestEntries>
              </manifestSection>
            </manifestSections>
          </archive>
        </configuration>
      </plugin>

      <!--
          Generating the Java-Doc site and zip it into JAR-archive for further release.
          It's a very important part of the build, but it's not bound to any maven-phases,
          because it implies some initial 'th-tool'-based manipulations to be executed before.

          So, in order to generate the standard (deployed to "Maven Central Repository")
          following maven-command should be executed ::>  `mvn javadoc:javadoc`
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${maven.javadoc.plugin.version}</version>
        <configuration>
          <debug>true</debug>
          <doclint>none</doclint>
<!--          <nohelp>true</nohelp>-->
<!--          <notree>true</notree>-->
          <notimestamp>true</notimestamp>
          <linksource>true</linksource>
          <release>${maven.javadoc.plugin.release}</release>
          <addStylesheets>
            <addStylesheet>javadoc-core-utils.css</addStylesheet>
          </addStylesheets>
          <docfilessubdirs>true</docfilessubdirs>
          <windowtitle>JavaDoc ${project.name}:${project.version}</windowtitle>
          <doctitle>JavaDoc for &lt;u&gt;${project.name}&lt;/u&gt;:${project.version}</doctitle>
<!--          <header>&lt;u&gt;${project.name}&lt;/u&gt;:${project.version}</header>-->
          <header>[(${jdh.navBarRight})]</header>
          <excludePackageNames>empty</excludePackageNames>
        </configuration>
        <executions>
          <execution>
            <id>javadoc</id>
            <goals>
              <goal>javadoc</goal>
            </goals>
            <configuration>
              <show>public</show>
              <bottom>Generated by &lt;b&gt;Apache Maven&lt;/b&gt;'s MOJO &lt;code&gt;javadoc:javadoc@javadoc&lt;/code&gt;</bottom>
            </configuration>
          </execution>
          <execution>
            <id>empty</id>
            <goals>
              <goal>javadoc</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/reports-empty</outputDirectory>
              <excludePackageNames>org.*</excludePackageNames>
              <nohelp>true</nohelp>
              <notree>true</notree>
              <noindex>true</noindex>
              <nonavbar>false</nonavbar>
              <bottom>Generated in order to get the site of only one 'overview' page</bottom>
            </configuration>
          </execution>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <show>public</show>
              <bottom>Generated by &lt;b&gt;Apache Maven&lt;/b&gt;'s MOJO &lt;code&gt;javadoc:jar@attach-javadocs&lt;/code&gt;</bottom>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
          Building the JAR-archive of Java-sources to be deployed as an optional project-artifact
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>${maven.source.plugin.version}</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <java.version>21</java.version>
    <lombock.version>1.18.42</lombock.version>
    <maven.compiler.release>${java.version}</maven.compiler.release>
    <maven-compiler-plugin.debug>true</maven-compiler-plugin.debug>
    <maven-compiler-plugin.version>3.14.1</maven-compiler-plugin.version>

    <main-class-name>org.krmdemo.techlabs.core.CoreUtilsMain</main-class-name>
    <th-tool-class-name>org.krmdemo.techlabs.thtool.ThymeleafTool</th-tool-class-name>

    <org.slf4j.version>2.0.17</org.slf4j.version>
    <ch.qos.logback.version>1.5.18</ch.qos.logback.version>

    <org.thymeleaf.version>3.1.3.RELEASE</org.thymeleaf.version>
    <thymeleaf-layout-dialect.version>3.4.0</thymeleaf-layout-dialect.version>
    <picocli.version>4.7.7</picocli.version>

    <maven-build-helper-plugin.version>3.6.1</maven-build-helper-plugin.version>
    <maven.dependency.plugin.version>3.8.1</maven.dependency.plugin.version>
    <maven.deploy.plugin.version>3.1.4</maven.deploy.plugin.version>
    <maven-enforcer-plugin.version>3.6.1</maven-enforcer-plugin.version>
    <maven.install.plugin.version>3.1.4</maven.install.plugin.version>
    <maven-jar-plugin.version>3.4.2</maven-jar-plugin.version>
    <maven.javadoc.plugin.version>3.12.0</maven.javadoc.plugin.version>
    <maven.javadoc.plugin.release>${java.version}</maven.javadoc.plugin.release>
    <maven-properties-plugin.version>1.2.1</maven-properties-plugin.version>
    <maven.release.plugin.version>3.1.1</maven.release.plugin.version>
    <maven.resources.plugin.version>3.3.1</maven.resources.plugin.version>
    <maven.source.plugin.version>3.3.1</maven.source.plugin.version>
    <maven.surefire.plugin.version>3.5.4</maven.surefire.plugin.version>
    <maven-versions-plugin.version>2.19.1</maven-versions-plugin.version>

    <org.junit.jupiter.version>5.13.4</org.junit.jupiter.version>
    <org.junit.platform.version>1.13.4</org.junit.platform.version>
    <org.assertj.version>3.27.6</org.assertj.version>
    <org.mockito.version>5.20.0</org.mockito.version>

    <commons-io.version>2.20.0</commons-io.version>
    <commons-lang.version>3.19.0</commons-lang.version>
    <commons-text.version>1.14.0</commons-text.version>
    <com.fasterxml.jackson.version>2.20.0</com.fasterxml.jackson.version>
    <snakeyaml-engine.version>2.10</snakeyaml-engine.version>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <maven-project.group>${project.groupId}</maven-project.group>
    <maven-project.artifact>${project.artifactId}</maven-project.artifact>
    <maven-project.version>${project.version}</maven-project.version>

    <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</maven.build.timestamp.format>
    <maven-project.build-date-time>${maven.build.timestamp}</maven-project.build-date-time>
  </properties>

  <distributionManagement>
    <repository>
      <id>github</id>
      <name>GitHub Packages</name>
      <url>https://maven.pkg.github.com/krm-demo/core-utils</url>
    </repository>
  </distributionManagement>

</project>
